package br.com.passaporteclio.domain.entity;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

@Entity
@Table(name = "tb_login")
public class User implements UserDetails, Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id_login")
	private Long idLogin;

	@Column(name = "email")
	private String email;

	@Column(name = "username", unique = true)
	private String username;

	@Column(name = "senha")
	private String senha;

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return this.permissoes;
	}

	public User() {
	}

	// Fazer construtor com campos!

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "tb_permissao_login", joinColumns = {
			@JoinColumn(name = "fk_id_login", referencedColumnName = "id_login") }, inverseJoinColumns = {
					@JoinColumn(name = "fk_id_permissao", referencedColumnName = "id_permissao") })

	private List<Permission> permissoes;

	// Sobrescrevendo equals e hashCode:
	@Override
	public int hashCode() {
		return Objects.hash(email, idLogin, permissoes, senha, username);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		return Objects.equals(email, other.email) && Objects.equals(idLogin, other.idLogin)
				&& Objects.equals(permissoes, other.permissoes) && Objects.equals(senha, other.senha)
				&& Objects.equals(username, other.username);
	}

	public Long getId() {
		return idLogin;
	}

	public void setPermissions(List<Permission> permissoes) {
		this.permissoes = permissoes;
	}

	public List<Permission> getPermissions() {
		return this.permissoes;
	}

	public void setPassword(String senha) {
		this.senha = senha;
	}

	@Override
	public String getPassword() {
		return this.senha;
	}

	public void setEmail(String email) {
		this.email = email;
	}
	
	@Override
	public String getEmail() {
		return this.email;
	}

	public void setUsername(String username) {
		this.username = username;
	}
	
	@Override
	public String getUsername() {
		return this.username;
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return true;
	}
}
